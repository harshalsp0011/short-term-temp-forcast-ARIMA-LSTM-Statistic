knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(dplyr)
library(ggplot2)
library(forecast)
library(tseries)
library(keras)
library(tensorflow)
# Read the data
temp_data <- read.csv("US_City_Temp_Data.csv")
# Load required libraries
library(dplyr)
library(ggplot2)
library(forecast)
library(tseries)
library(keras)
library(tensorflow)
# Read the data
temp_data <- read.csv("US_City_Temp_Data.csv")
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(dplyr)
library(ggplot2)
library(forecast)
library(tseries)
library(keras)
library(tensorflow)
# Read the data
temp_data <- read.csv("US_City_Temp_Data.csv")
temp_data$time <- as.Date(temp_data$time)
# Select data for Albuquerque
city_data <- temp_data %>%
select(time, albuquerque) %>%
na.omit() %>%
mutate(time = as.Date(time))
# Plot the time series
ggplot(city_data, aes(x = time, y = albuquerque)) +
geom_line() +
labs(title = "Monthly Temperature for Albuquerque",
y = "Temperature (째C)",
x = "Time")
# Decompose the time series
city_ts <- ts(city_data$albuquerque, frequency = 12)
decomposed <- decompose(city_ts, type = "additive")
plot(decomposed)
# ADF test function
adf_test <- function(series) {
result <- adf.test(series)
cat('ADF Statistic:', result$statistic, '\n')
cat('p-value:', result$p.value, '\n')
cat('Critical Values:\n')
print(result$critical)
}
# Perform ADF test
adf_test(city_data$albuquerque)
# Fit ARIMA model
arima_model <- auto.arima(city_ts)
summary(arima_model)
# Forecast
forecast <- forecast(arima_model, h = 12)
autoplot(forecast) +
labs(title = "ARIMA Forecast",
y = "Temperature (째C)",
x = "Time")
# Load required libraries
library(reticulate)
library(tensorflow)
library(keras)
# Scale the data
scaled_data <- scale(city_data$albuquerque)  # Ensure 'city_data$albuquerque' exists and is numeric
# Reshape data for LSTM
X_train <- array(scaled_data, dim = c(length(scaled_data), 1, 1))
Y_train <- scaled_data
# Define LSTM model
model <- keras_model_sequential() %>%
layer_lstm(units = 50, return_sequences = TRUE, input_shape = c(1, 1)) %>%
layer_lstm(units = 50, return_sequences = FALSE) %>%
layer_dense(units = 1)
# Load required libraries
library(reticulate)
library(tensorflow)
library(keras)
# Ensure 'city_data$albuquerque' exists and is numeric
scaled_data <- scale(city_data$albuquerque)
# Reshape data for LSTM (adjust time steps if needed)
X_train <- array(scaled_data, dim = c(length(scaled_data), 1, 1))
Y_train <- scaled_data
# Define the LSTM model
model <- keras_model_sequential() %>%
layer_lstm(units = 50, return_sequences = TRUE, input_shape = c(1, 1)) %>%
layer_lstm(units = 50, return_sequences = FALSE) %>%
layer_dense(units = 1)
# Load required libraries
library(reticulate)
library(tensorflow)
library(keras)
# Ensure 'city_data$albuquerque' exists and is numeric
scaled_data <- scale(city_data$albuquerque)
# Reshape data for LSTM (adjust time steps if needed)
X_train <- array(scaled_data, dim = c(length(scaled_data), 1, 1))
Y_train <- scaled_data
# Define the LSTM model
model <- keras_model_sequential() %>%
layer_lstm(units = 50, return_sequences = TRUE, input_shape = list(1, 1)) %>%
layer_lstm(units = 50, return_sequences = FALSE) %>%
layer_dense(units = 1)
# Load required libraries
library(reticulate)
library(tensorflow)
library(keras)
# Ensure 'city_data$albuquerque' exists and is numeric
scaled_data <- scale(city_data$albuquerque)
# Reshape data for LSTM (adjust time steps if needed)
X_train <- array(scaled_data, dim = c(length(scaled_data), 1, 1))
Y_train <- scaled_data
# Define the LSTM model
model <- keras_model_sequential() %>%
layer_lstm(units = 50, return_sequences = TRUE, input_shape = list(1, 1)) %>%
layer_lstm(units = 50, return_sequences = FALSE) %>%
layer_dense(units = 1)
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(dplyr)
library(ggplot2)
library(forecast)
library(tseries)
library(keras)
library(tensorflow)
# Read the data
temp_data <- read.csv("US_City_Temp_Data.csv")
temp_data$time <- as.Date(temp_data$time)
# Select data for Albuquerque
city_data <- temp_data %>%
select(time, albuquerque) %>%
na.omit() %>%
mutate(time = as.Date(time))
# Plot the time series
ggplot(city_data, aes(x = time, y = albuquerque)) +
geom_line() +
labs(title = "Monthly Temperature for Albuquerque",
y = "Temperature (째C)",
x = "Time")
# Decompose the time series
city_ts <- ts(city_data$albuquerque, frequency = 12)
decomposed <- decompose(city_ts, type = "additive")
plot(decomposed)
# ADF test function
adf_test <- function(series) {
result <- adf.test(series)
cat('ADF Statistic:', result$statistic, '\n')
cat('p-value:', result$p.value, '\n')
cat('Critical Values:\n')
print(result$critical)
}
# Perform ADF test
adf_test(city_data$albuquerque)
# Fit ARIMA model
arima_model <- auto.arima(city_ts)
summary(arima_model)
# Forecast
forecast <- forecast(arima_model, h = 12)
autoplot(forecast) +
labs(title = "ARIMA Forecast",
y = "Temperature (째C)",
x = "Time")
# Load required libraries
library(reticulate)
library(tensorflow)
library(keras)
# Ensure 'city_data$albuquerque' exists and is numeric
scaled_data <- scale(city_data$albuquerque)
# Reshape data for LSTM (adjust time steps if needed)
X_train <- array(scaled_data, dim = c(length(scaled_data), 1, 1))
Y_train <- scaled_data
# Define the LSTM model
model <- keras_model_sequential() %>%
layer_lstm(units = 50, return_sequences = TRUE, input_shape = list(1, 1)) %>%
layer_lstm(units = 50, return_sequences = FALSE) %>%
layer_dense(units = 1)
# Load required libraries
library(reticulate)
library(tensorflow)
library(keras)
# Ensure 'city_data$albuquerque' exists and is numeric
scaled_data <- scale(city_data$albuquerque)
# Reshape data for LSTM (adjust time steps if needed)
X_train <- array(scaled_data, dim = c(length(scaled_data), 1, 1))  # (samples, timesteps, features)
Y_train <- scaled_data
# Define the LSTM model
model <- keras_model_sequential() %>%
layer_lstm(units = 50, return_sequences = TRUE, input_shape = list(1, 1)) %>%
layer_lstm(units = 50, return_sequences = FALSE) %>%
layer_dense(units = 1)
reticulate::py_last_error()
